from telebot import TeleBot, types
import requests
import random
from config import API_KEY, GENRES
from database.users import add_shown_film, clear_shown_films, is_film_shown
from utils.keyboard import get_year_range_keyboard

def register_handlers(bot: TeleBot):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_choices = {}

    @bot.message_handler(func=lambda message: message.text == 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º')
    def random_film_menu(message):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_choices[message.chat.id] = {
            'genre': None, 
            'year': None
        }
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        random_button = types.InlineKeyboardButton(
            "üé≤ –õ—é–±–æ–π —Ñ–∏–ª—å–º", 
            callback_data='random_any'
        )
        genres_button = types.InlineKeyboardButton(
            "üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä", 
            callback_data='show_genres'
        )
        year_button = types.InlineKeyboardButton(
            "üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", 
            callback_data='show_years'
        )
        markup.add(random_button)
        markup.add(genres_button, year_button)
        
        bot.reply_to(
            message,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == 'show_genres')
    def show_genres(call):
        markup = types.InlineKeyboardMarkup(row_width=2)
        genre_buttons = [
            types.InlineKeyboardButton(
                name, 
                callback_data=f'set_genre_{id}'
            ) for id, name in GENRES.items()
        ]
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup.add(*genre_buttons)
        markup.add(back_button)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('set_genre_'))
    def handle_genre_selection(call):
        genre_id = call.data.split('_')[2]
        user_choices[call.message.chat.id]['genre'] = genre_id
        
        show_current_filters(call.message, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == 'show_years')
    def show_years(call):
        markup = get_year_range_keyboard()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_menu')
        markup.add(back_button)
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('year_'))
    def handle_year_selection(call):
        year_range = call.data.split('_')[1]
        user_choices[call.message.chat.id]['year'] = year_range
        
        show_current_filters(call.message, call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
    def back_to_menu(call):
        random_film_menu(call.message)

    @bot.callback_query_handler(func=lambda call: call.data == 'search_with_filters')
    def search_with_filters(call):
        chat_id = call.message.chat.id
        choices = user_choices.get(chat_id, {})
        genre_id = choices.get('genre')
        year_range = choices.get('year')
        
        get_random_film(call.message, genre_id, year_range)

    def show_current_filters(message, message_id):
        chat_id = message.chat.id
        choices = user_choices.get(chat_id, {})
        genre_id = choices.get('genre')
        year_range = choices.get('year')
        
        genre_name = GENRES.get(genre_id, '–ù–µ –≤—ã–±—Ä–∞–Ω') if genre_id else '–ù–µ –≤—ã–±—Ä–∞–Ω'
        year_text = year_range if year_range else '–ù–µ –≤—ã–±—Ä–∞–Ω'
        if year_text == 'any':
            year_text = '–õ—é–±–æ–π'
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        genres_button = types.InlineKeyboardButton(
            "üé≠ –í—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä", 
            callback_data='show_genres'
        )
        year_button = types.InlineKeyboardButton(
            "üìÖ –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥", 
            callback_data='show_years'
        )
        search_button = types.InlineKeyboardButton(
            "üîç –ò—Å–∫–∞—Ç—å", 
            callback_data='search_with_filters'
        )
        back_button = types.InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", 
            callback_data='back_to_menu'
        )
        
        markup.add(genres_button, year_button)
        markup.add(search_button)
        markup.add(back_button)
        
        text = (
            "–¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n"
            f"üé≠ –ñ–∞–Ω—Ä: {genre_name}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {year_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=markup
        )

    def get_random_film(message, genre_id=None, year_range=None):
        headers = {
            'X-API-KEY': API_KEY,
            'Content-Type': 'application/json',
        }
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∂–∞–Ω—Ä–∞ –∏ –≥–æ–¥–∞
            if genre_id or year_range:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                if year_range and year_range != 'any':
                    start_year, end_year = map(int, year_range.split('-'))
                else:
                    start_year, end_year = 1900, 2024

                url = 'https://kinopoiskapiunofficial.tech/api/v2.2/films'
                params = {
                    'order': 'RATING',
                    'type': 'ALL',
                    'ratingFrom': 0,
                    'ratingTo': 10,
                    'yearFrom': start_year,
                    'yearTo': end_year,
                    'page': 1
                }
                
                if genre_id:
                    params['genres'] = genre_id
            else:
                # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç, –±–µ—Ä–µ–º –∏–∑ —Ç–æ–ø-250
                url = 'https://kinopoiskapiunofficial.tech/api/v2.2/films/top?type=TOP_250_BEST_FILMS&page=1'
                params = {}

            response = requests.get(url, headers=headers, params=params)
            data = response.json()
            
            if data.get('items') or data.get('films'):
                films = data.get('items') or data.get('films')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
                cache_key = f"{str(genre_id)}_{year_range}"
                available_films = [
                    film for film in films 
                    if not is_film_shown(
                        message.chat.id, 
                        cache_key,
                        film.get('kinopoiskId') or film.get('filmId')
                    )
                ]
                
                # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∏–ª—å–º—ã –ø–æ–∫–∞–∑–∞–Ω—ã, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                if not available_films:
                    clear_shown_films(message.chat.id, cache_key)
                    available_films = films
                
                film = random.choice(available_films)
                film_id = film.get('kinopoiskId') or film.get('filmId')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
                add_shown_film(message.chat.id, cache_key, film_id)
                
                # –ü–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                details_response = requests.get(
                    f'https://kinopoiskapiunofficial.tech/api/v2.2/films/{film_id}',
                    headers=headers
                )
                film_details = details_response.json()
                
                film_title = film_details.get('nameRu') or film_details.get('nameOriginal')
                film_year = film_details.get('year', "–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
                poster_url = film_details.get('posterUrl')
                film_length = film_details.get('filmLength')  # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                
                kp_rating = film_details.get('ratingKinopoisk', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
                imdb_rating = film_details.get('ratingImdb', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
                description = film_details.get('description', '')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø (—Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö
                film_type = film_details.get('type', '').upper()
                seasons_count = None
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ä–∏–∞–ª, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö
                if film_type == 'TV_SERIES':
                    try:
                        seasons_response = requests.get(
                            f'https://kinopoiskapiunofficial.tech/api/v2.2/films/{film_id}/seasons',
                            headers=headers
                        )
                        seasons_data = seasons_response.json()
                        if seasons_data.get('items'):
                            seasons_count = len(seasons_data['items'])
                    except Exception as e:
                        print(f"Error getting seasons info: {e}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞
                genres = [genre['genre'] for genre in film_details.get('genres', [])]
                genres_str = ', '.join(genres) if genres else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                
                watch_url = f"https://www.kinopoisk.vip/film/{film_id}/"
                
                markup = types.InlineKeyboardMarkup(row_width=2)
                watch_button = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å", url=watch_url)
                next_button = types.InlineKeyboardButton(
                    "üé≤ –°–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω—ã–π", 
                    callback_data=f'next_random_{genre_id or "any"}_{year_range or "any"}'
                )
                markup.add(watch_button, next_button)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    f"üé¨ {film_title}\n"
                    f"üìÖ {film_year}\n"
                    f"üé≠ –ñ–∞–Ω—Ä—ã: {genres_str}\n"
                    f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating}\n"
                    f"üìä –†–µ–π—Ç–∏–Ω–≥ IMDb: {imdb_rating}"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–∏–ª—å–º–∞
                if film_type == 'TV_SERIES':
                    seasons_text = f"\nüì∫ –°–µ–∑–æ–Ω–æ–≤: {seasons_count}" if seasons_count else "\nüì∫ –°–µ—Ä–∏–∞–ª"
                    message_text += seasons_text
                elif film_length:  # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    message_text += f"\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film_length} –º–∏–Ω."
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if description:
                    message_text += f"\n\nüìù {description[:200]}..." if len(description) > 200 else f"\n\nüìù {description}"
                
                if poster_url:
                    try:
                        bot.send_photo(
                            message.chat.id,
                            poster_url,
                            caption=message_text,
                            reply_markup=markup
                        )
                    except Exception as e:
                        print(f"Error sending photo: {e}")
                        bot.send_message(
                            message.chat.id,
                            message_text,
                            reply_markup=markup
                        )
                else:
                    bot.send_message(
                        message.chat.id,
                        message_text,
                        reply_markup=markup
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä."
                )
                
        except Exception as e:
            print(f"Error: {e}")
            bot.send_message(
                message.chat.id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω—ã–π"
    @bot.callback_query_handler(func=lambda call: call.data.startswith('next_random_'))
    def handle_next_random(call):
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
            parts = call.data.split('_')
            if len(parts) >= 3:  # next_random_genre_year
                genre_id = parts[2]
                year_range = parts[3]
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 'any' –≤ None
                genre_id = None if genre_id == 'any' else genre_id
                year_range = None if year_range == 'any' else year_range
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
                get_random_film(call.message, genre_id, year_range)
            else:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                get_random_film(call.message)
                
        except Exception as e:
            print(f"Error in handle_next_random: {e}")
            bot.answer_callback_query(
                call.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )

    @bot.callback_query_handler(func=lambda call: call.data == 'random_any')
    def handle_random_any(call):
        try:
            # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            user_choices[call.message.chat.id] = {
                'genre': None,
                'year': None
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            get_random_film(call.message)
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            print(f"Error in handle_random_any: {e}")
            bot.answer_callback_query(
                call.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
