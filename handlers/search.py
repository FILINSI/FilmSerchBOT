from telebot import TeleBot, types
import requests
from config import API_KEY
from database.users import get_user_films_count

def register_handlers(bot: TeleBot):
    @bot.message_handler(func=lambda message: message.text == 'üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞')
    def search_command(message):
        bot.reply_to(
            message,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )

    @bot.message_handler(func=lambda message: not message.text.startswith('/') 
                        and message.text not in ['üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 
                                               'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º', 'üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞'])
    def search_film(message):
        film_name = message.text
        films_count = get_user_films_count(message.from_user.id)
        
        headers = {
            'X-API-KEY': API_KEY,
            'Content-Type': 'application/json',
        }
        
        try:
            # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            response = requests.get(
                f'https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword?keyword={film_name}',
                headers=headers
            )
            data = response.json()
            
            if data.get('films'):
                for film in data['films'][:films_count]:
                    film_id = film.get('filmId')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                    details_response = requests.get(
                        f'https://kinopoiskapiunofficial.tech/api/v2.2/films/{film_id}',
                        headers=headers
                    )
                    film_details = details_response.json()
                    
                    film_title = film.get('nameRu') or film.get('nameEn')
                    film_year = film.get('year', "–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
                    poster_url = film.get('posterUrlPreview')
                    film_type = film_details.get('type', '').upper()
                    film_length = film_details.get('filmLength')
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
                    kp_rating = film_details.get('ratingKinopoisk', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
                    imdb_rating = film_details.get('ratingImdb', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã
                    genres = [genre['genre'] for genre in film_details.get('genres', [])]
                    genres_str = ', '.join(genres) if genres else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
                    
                    watch_url = f"https://www.kinopoisk.vip/film/{film_id}/"
                    
                    markup = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å", url=watch_url)
                    markup.add(button)
                    
                    message_text = (
                        f"üé¨ {film_title}\n"
                        f"üìÖ {film_year}\n"
                        f"üé≠ –ñ–∞–Ω—Ä—ã: {genres_str}\n"
                        f"‚≠êÔ∏è –†–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {kp_rating}\n"
                        f"üìä –†–µ–π—Ç–∏–Ω–≥ IMDb: {imdb_rating}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∑–æ–Ω–∞—Ö –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞ –∏–ª–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ñ–∏–ª—å–º–∞
                    if film_type == 'TV_SERIES':
                        try:
                            seasons_response = requests.get(
                                f'https://kinopoiskapiunofficial.tech/api/v2.2/films/{film_id}/seasons',
                                headers=headers
                            )
                            seasons_data = seasons_response.json()
                            if seasons_data.get('items'):
                                seasons_count = len(seasons_data['items'])
                                message_text += f"\nüì∫ –°–µ–∑–æ–Ω–æ–≤: {seasons_count}"
                            else:
                                message_text += "\nüì∫ –°–µ—Ä–∏–∞–ª"
                        except Exception as e:
                            print(f"Error getting seasons info: {e}")
                            message_text += "\nüì∫ –°–µ—Ä–∏–∞–ª"
                    elif film_length:
                        message_text += f"\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {film_length} –º–∏–Ω."
                    
                    if poster_url:
                        try:
                            bot.send_photo(
                                message.chat.id,
                                poster_url,
                                caption=message_text,
                                reply_markup=markup
                            )
                        except Exception as e:
                            print(f"Error sending photo: {e}")
                            bot.send_message(
                                message.chat.id,
                                message_text,
                                reply_markup=markup
                            )
                    else:
                        bot.send_message(
                            message.chat.id,
                            message_text,
                            reply_markup=markup
                        )
                return
                
            bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            
        except Exception as e:
            print(f"Error: {e}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
